#!/bin/bash
#set -x

usage() {
    cat <<EOF
$0 [-br] DEVICE
Options:
    -b         skip badblocks check
    -r         skip random filling (use only if you know what you are doing)
    -w         skip dd of binary.img
    -i IMAGE   put IMAGE on DEVICE (default is binary.img)
EOF
}

# Check if user is root
if [ "$(id -u)" != "0" ]; then
   echo "[-] This script must be run as root" 1>&2
   exit 1
fi

skip_badblocks=0
skip_random=0
skip_img=0
img=binary.img

while getopts 'brwsi:' opt; do
    case $opt in
    b)
        skip_badblocks=1
        ;;
    r)
        skip_random=1
        ;;
    i)
        img=$OPTARG
        ;;
    w)
        skip_img=1
        ;;
    \?)
        echo "[-] Invalid option: -$OPTARG" >&2
        usage
        exit 1
        ;;
    esac
done
shift $((OPTIND-1))

if ! [[ -f "$img" ]]; then
    echo "[-] Image $img is not valid"
    exit 1
fi

if [ $# != 1 ];then
    echo "[-] Wrong argument number"
    usage
    exit 1
fi

if ! [[ -b $1 ]]; then
    echo "[-] $1 should be a block special device"
    usage
    exit 1
fi
device=$1

# check dependencies
if ! which mkfs.btrfs &> /dev/null; then
     echo "[-] No btrfs. Setting up btrfs-tools"
     sudo apt-get --force-yes --yes install btrfs-tools && echo "[+] Btrfs-tools installed!"
fi
if ! which cryptsetup &> /dev/null; then
     echo "[-] No cryptsetup. Setting up cryptsetup"
     sudo apt-get --force-yes --yes install cryptsetup && echo "[+] Cryptsetup installed!"
fi

# Start
echo "[+] Start"

# Check for bad block on the device:
if [[ $skip_badblocks -eq 0 ]]; then
    badblocks -c 10240 -s -w -t random -v "${device}"
    echo "[+] Badblock check completed!"
fi

# Random data on the device:
if [[ $skip_random -eq 0 ]]; then
    echo "[+] Writing random data on the device!"
    dd if=/dev/urandom of="${device}"
    echo "[+] Completed!"
fi

# DD the .img to a usb
echo -n "[+] Starting copy"
if [[ $skip_img -eq 0 ]]; then
	dd "if=$img" of="${device}" &
	ddpid=$!
	echo " with PID $ddpid"
	totchar=$(stat -c '%s' "$img")
	humansize=$(du -h "$img" | cut -f1)
	while kill -0 $ddpid; do
	    wchar=$(egrep '^wchar:' /proc/$ddpid/io | awk '{ print $2 }')
	    echo -en "\rWriting $humansize: $((wchar * 100 / totchar))%"
	    sleep 10
	done
	wait
	echo "[+] Completed!"
fi


# Make the partition
echo "[+] Make ecnrypted and persistent partition"
img_bytes=$(stat -c %s "$img")
img_bytes=$((img_bytes+1))

if [ -e "${device}"2 ]; then
	echo "[W] warning: ${device}2 seems to already exist!"
fi
partprobe
parted "${device}" -- mkpart primary "${img_bytes}B" -1
partprobe #it was fun, let's do it again

# Ecnrypt partition
cryptsetup --verbose --batch-mode --key-size 512 --hash sha512 --cipher aes-xts-plain --use-random luksFormat "${device}2" <<<freepto || exit 1

# Open partition
cryptsetup luksOpen "${device}2" my_usb.$$ <<<freepto || exit 1

# Make FS with label: "persistence"
mkfs.btrfs -L persistence /dev/mapper/my_usb.$$ || exit 1

# Make a mount point
mkdir -p /mnt/my_usb.$$

# Munt the partition
mount /dev/mapper/my_usb.$$ /mnt/my_usb.$$/ -o noatime,nodiratime,compress=lzo

# Make the persistence.conf file
echo "/ union" > ~/persistence.conf
mv ~/persistence.conf /mnt/my_usb.$$

# Umount
umount /dev/mapper/my_usb.$$

# Close LUKS
cryptsetup luksClose /dev/mapper/my_usb.$$

# Remove mount dir
rm -rf /mnt/my_usb.$$
